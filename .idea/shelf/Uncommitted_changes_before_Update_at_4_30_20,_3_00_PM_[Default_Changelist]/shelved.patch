Index: app/services/schedule_service.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>require 'cassandra'\n\nclass ScheduleService\n\n  @canOrderBy = %w[arrivingAt time train goingTo]\n\n  def initialize\n    @cluster = Cassandra.cluster(hosts: ['137.112.104.137', '137.112.104.136', '137.112.104.138'])\n    @stations = @cluster.connect(\"stations\")\n  end\n\n  def addToSchedule(arrivingAt, time, goingTo, train)\n    seeIfExists = @stations.prepare('SELECT * From arrivals Where arrivingAt = ? and time = ? and train = ? ALLOW FILTERING;')\n    addTrainTime = @stations.prepare('INSERT INTO arrivals (arrivingAt, time, goingTo, train) VALUES (?,?,?,?)')\n\n    duplicates = @stations.execute(seeIfExists, arguments: [arrivingAt, time, train])\n    puts(duplicates.empty?)\n    if not duplicates.empty?\n      return \"This station, time, and train combination already exists\";\n    else\n      @stations.execute(addTrainTime, arguments: [arrivingAt, time, goingTo, train])\n      return \"\"\n    end\n  end\n\n  def removeFromSchedule(arrivingAt, time, train)\n    seeIfExists = @stations.prepare('SELECT * From arrivals Where arrivingAt = ? and time = ? and train = ? LIMIT 1 ALLOW FILTERING;')\n    removeTrainTime = @stations.prepare('Delete From arrivals Where arrivingAt = ? and time = ? and train = ?')\n\n    exists = @stations.execute(seeIfExists, arguments: [arrivingAt, time, train])\n    if not exists.empty?\n      @stations.execute(removeTrainTime, arguments: [arrivingAt, time, train])\n      return \"\"\n    else\n      return \"This station, time, and train combination does not exist\";\n    end\n  end\n\n  def getSchedule\n    search = @stations.prepare(\"Select * From arrivals\")\n    results = @stations.execute(search)\n    return results\n  end\n\n  def editScheduale (oldArrivingAt, oldTime, oldTrain, newArrivingAt, newTime, newTrain, newGoingTo)\n    seeIfExists = @stations.prepare('SELECT * From arrivals Where arrivingAt = ? and time = ? and train = ? LIMIT 1 ALLOW FILTERING;')\n    edit = @stations.prepare('UPDATE arrivals SET arrivingAt = ?, time = ?, train = ?, goingTo = ? Where arrivingAt = ? and\n                                      time = ? and train = ?')\n\n    exists = @stations.execute(seeIfExists, arguments: [oldArrivingAt, oldTime, oldTrain])\n    if not exists.empty?\n      @stations.execute(edit, arguments: [newArrivingAt, newTime, newTrain, newGoingTo, oldArrivingAt, oldTime, oldTrain])\n      return \"\"\n    else\n      return \"This station, time, and train combination does not exist\";\n    end\n  end\n\n  def orderBy (orderTerm, isAscending)\n    orderList = @stations.prepare(\"SELECT * From arrivals ORDER BY ? ? \")\n\n    if orderTerm.in?(@canOrderBy)\n      if isAscending\n        results = @stations.execute(orderList, arguments: [orderTerm, 'Asc'])\n      else\n        results = @stations.execute(orderList, arguments: [orderTerm, 'Desc'])\n      end\n\n      return results\n    else\n      return \"Enter a proper criteria to order by\"\n    end\n  end\n\n\nend
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/services/schedule_service.rb	(revision d98b263b5cf9a120a846566f8278447f4d68d33d)
+++ app/services/schedule_service.rb	(date 1588273230876)
@@ -5,7 +5,7 @@
   @canOrderBy = %w[arrivingAt time train goingTo]
 
   def initialize
-    @cluster = Cassandra.cluster(hosts: ['137.112.104.137', '137.112.104.136', '137.112.104.138'])
+    @cluster = Cassandra.cluster(hosts: %w[137.112.104.137 137.112.104.136 137.112.104.138])
     @stations = @cluster.connect("stations")
   end
 
